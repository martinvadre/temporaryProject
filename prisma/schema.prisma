generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_DATABASE_URL")
}

model User {
    id            String          @id @default(cuid()) @map("_id")
    email         String?         @unique
    name          String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    emailVerified DateTime?
    image         String?
    username      String?         @unique
    role          String?         @default("user")
    password      String?
    accounts      Account?
    Authenticator Authenticator[]
    sessions      Session[]
    toDos         ToDo[]


    Event Event[]
}

model Account {
    id                       String   @id @default(auto()) @db.ObjectId() @map("_id")
    userId                   String   @unique
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    user                     User     @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @db.ObjectId() @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model VerificationToken {
    id String @id @default(auto()) @db.ObjectId() @map("_id")
    email String
    token String @unique
    expires DateTime

    @@unique([email, token])
}

model Authenticator {
    credentialID         String  @id @default(auto()) @db.ObjectId() @map("_id")
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model ToDo {
    id         String   @id @default(auto()) @db.ObjectId() @map("_id")
    title      String
    description String?
    completed  Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    doneAt     DateTime?
    dueAt    DateTime
    userId     String
    calendarId String   @unique

    user      User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Event {
    id         String   @id @default(auto()) @db.ObjectId() @map("_id")
    title      String
    start      DateTime
    end        DateTime
    allDay     Boolean
    userId     String
    calendarId String

    user      User     @relation(fields: [userId], references: [id])

    @@index([userId])
}
